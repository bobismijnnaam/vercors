// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases VerifyThis19One
//:: tools silicon
//:: suite medium
//:: verdict Pass

// ./unix/bin/vct --silicon --encoded ./examples/verifythis2019/challenge1.vpr ./examples/verifythis2019/challenge1.pvl 

class Challenge1 {
	
	/** ** Definitions */
	
	requires 0 <= i && i < |xs|;
	ensures \result == xs[i];
	pure int get(seq<int> xs, int i) = xs[i];
	
	ensures \result == xs + ys;
	pure seq<int> append(seq<int> xs, seq<int> ys) = xs + ys;
	
	inline pure int last(seq<int> xs) = xs[|xs| - 1];
	inline pure seq<int> last(seq<seq<int>> xs) = xs[|xs| - 1];
	inline pure boolean last(seq<boolean> xs) = xs[|xs| - 1];
	
	ensures \result == (\forall int i; 0 <= i && i < |xs| - 1; xs[i] <= xs[i + 1]);
	ensures (\result && 0 < |xs|) ==> (\forall int i; 0 <= i && i < |xs|; xs[0] <= xs[i]);
	pure boolean incr(seq<int> xs) = 1 < |xs| ==> (xs[0] <= xs[1] && incr(tail(xs)));
	
	ensures \result == (\forall int i; 0 <= i && i < |xs| - 1; xs[i] >= xs[i + 1]);
	ensures (\result && 0 < |xs|) ==> (\forall int i; 0 <= i && i < |xs|; xs[0] >= xs[i]);
	pure boolean decr(seq<int> xs) = 1 < |xs| ==> (xs[0] >= xs[1] && decr(tail(xs)));
	
	pure seq<int> flatten(seq<seq<int>> xs) = 0 < |xs| ? head(xs) + flatten(tail(xs)) : seq<int> { };
	
	ensures |\result| == |xs|;
	ensures (\forall int i; 0 <= i && i < |xs|; \result[i] == xs[|xs| - 1 - i]);
	seq<int> rev(seq<int> xs) = 0 < |xs| ? rev(tail(xs)) + seq<int> { head(xs) } : seq<int> { };
	
	requires 0 <= n && n <= |xs|;
	ensures |\result| == |xs| - n;
	ensures (\forall int i; 0 <= i && i < |xs| - n; \result[i] == xs[i + n]);
	pure seq<int> skip(seq<int> xs, int n) = 0 < n ? skip(tail(xs), n - 1) : xs;
	
	ensures |\result| == |xs|;
	pure bag<int> tobag(seq<int> xs) = 0 < |xs| ? bag<int> { head(xs) } + tobag(tail(xs)) : bag<int> { };
	
	resource ListRepr(seq<int> xs, seq<int> ys, seq<int> zs) = xs == ys + zs;
	
	resource Maximality(seq<seq<int>> xs, seq<boolean> dir) =
		|xs| == |dir| &&
		(\forall int i; 0 <= i && i < |xs|; 0 < |xs[i]|) &&
		(\forall int i; 0 <= i && i < |xs| - 1 && dir[i]; last(xs[i]) >= head(xs[i + 1])) &&
		(\forall int i; 0 <= i && i < |xs| - 1 && !dir[i]; last(xs[i]) < head(xs[i + 1]));
	
	
	/** ** Lemmas */
	
	ensures (xs + ys) + zs == xs + (ys + zs);
	void lemma_seq_app_assoc(seq<int> xs, seq<int> ys, seq<int> zs) {
	}
	
	ensures (xs + ys) + zs == xs + (ys + zs);
	void lemma_sseq_app_assoc(seq<seq<int>> xs, seq<seq<int>> ys, seq<seq<int>> zs) {
	}
	
	ensures seq<seq<int>> { xs, ys } == seq<seq<int>> { xs } + seq<seq<int>> { ys };
	void lemma_sseq_split(seq<int> xs, seq<int> ys) {
	}
	
	ensures flatten(seq<seq<int>> { x } + xs) == x + flatten(xs);
	void lemma_flatten_cons(seq<int> x, seq<seq<int>> xs) {
		assert tail(seq<seq<int>> { x } + xs) == xs;
	}
	
	ensures flatten(xs + ys) == flatten(xs) + flatten(ys);
	void lemma_flatten_app(seq<seq<int>> xs, seq<seq<int>> ys) {
		if (0 < |xs|) {
			lemma_flatten_app(tail(xs), ys);
			assert xs == seq<seq<int>> { head(xs) } + tail(xs);
			lemma_sseq_app_assoc(seq<seq<int>> { head(xs) }, tail(xs), ys);
			lemma_flatten_cons(head(xs), tail(xs) + ys);
		}
	}
	
	ensures flatten(seq<seq<int>> { x }) == x;
	void lemma_flatten_singleton(seq<int> x) {
		assert flatten(seq<seq<int>> { x }) == head(seq<seq<int>> { x }) + flatten(tail(seq<seq<int>> { x }));
	}
	
	requires ListRepr(xs, ys, zs1 + zs2);
	ensures ListRepr(xs, ys + zs1, zs2);
	void lemma_ListRepr_move_right(seq<int> xs, seq<int> ys, seq<int> zs1, seq<int> zs2) {
		unfold ListRepr(xs, ys, zs1 + zs2);
		fold ListRepr(xs, ys + zs1, zs2);
	}
	
	requires 0 <= n && n < |xs|;
	ensures skip(xs, n) == seq<int> { xs[n] } + skip(xs, n + 1);
	void lemma_skip_unfold_once(seq<int> xs, int n) {
	}
	
	requires 0 < |xs|;
	requires Maximality(seq<seq<int>> { }, seq<boolean> { });
	ensures Maximality(seq<seq<int>> { xs }, seq<boolean> { dir });
	void lemma_Maximality_singleton(seq<int> xs, boolean dir) {
		unfold Maximality(seq<seq<int>> { }, seq<boolean> { });
		fold Maximality(seq<seq<int>> { xs }, seq<boolean> { dir });
	}
	
	requires 0 < |xs| && |xs| == |dir| && 0 < |x|;
	requires (\forall int i; 0 <= i && i < |xs|; 0 < |xs[i]|);
	requires last(dir) ==> last(last(xs)) >= head(x);
	requires !last(dir) ==> last(last(xs)) < head(x);
	requires Maximality(xs, dir);
	ensures Maximality(xs + seq<seq<int>> { x }, dir + seq<boolean> { d });
	void lemma_Maximality_add(seq<seq<int>> xs, seq<boolean> dir, seq<int> x, boolean d) {
		unfold Maximality(xs, dir);
		fold Maximality(xs + seq<seq<int>> { x }, dir + seq<boolean> { d });
	}
	
	ensures tobag(seq<int> { x } + xs) == bag<int> { x } + tobag(xs);
	void lemma_tobag_cons(int x, seq<int> xs) {
		assert tail(seq<int> { x } + xs) == xs;
	}
	
	ensures tobag(xs + ys) == tobag(xs) + tobag(ys);
	void lemma_tobag_split(seq<int> xs, seq<int> ys) {
		if (0 < |xs|) {
			lemma_tobag_split(tail(xs), ys);
			assert xs == seq<int> { head(xs) } + tail(xs);
			lemma_seq_app_assoc(seq<int> { head(xs) }, tail(xs), ys);
			lemma_tobag_cons(head(xs), tail(xs) + ys);
		}
	}
	
	ensures tobag(xs + ys) == tobag(ys + xs);
	void lemma_tobag_app(seq<int> xs, seq<int> ys) {
		lemma_tobag_split(xs, ys);
		lemma_tobag_split(ys, xs);
	}
	
	ensures tobag(xs) == tobag(rev(xs));
	void lemma_tobag_rev(seq<int> xs) {
		if (0 < |xs|) {
			lemma_tobag_rev(tail(xs));
			assert xs == seq<int> { head(xs) } + tail(xs);
			lemma_tobag_app(rev(tail(xs)), seq<int> { head(xs) });
			lemma_tobag_cons(head(xs), rev(tail(xs)));
		}
	}
	
	requires |xs| == |ys|;
	requires (\forall int i; 0 <= i && i < |xs|; tobag(xs[i]) == tobag(ys[i]));
	ensures tobag(flatten(xs)) == tobag(flatten(ys));
	void lemma_flatten_tobag(seq<seq<int>> xs, seq<seq<int>> ys) {
		if (0 < |xs|) {
			lemma_flatten_tobag(tail(xs), tail(ys));
			assert xs == seq<seq<int>> { head(xs) } + tail(xs);
			assert ys == seq<seq<int>> { head(ys) } + tail(ys);
			lemma_flatten_cons(head(xs), tail(xs));
			lemma_tobag_split(head(xs), flatten(tail(xs)));
			lemma_flatten_cons(head(ys), tail(ys));
			lemma_tobag_split(head(ys), flatten(tail(ys)));
		}
	}
	
	ensures flatten(seq<seq<int>> { xs + ys }) == flatten(seq<seq<int>> { xs, ys });
	void lemma_flatten_split_two(seq<int> xs, seq<int> ys) {
		lemma_flatten_singleton(xs + ys);
		lemma_sseq_split(xs, ys);
		lemma_flatten_app(seq<seq<int>> { xs }, seq<seq<int>> { ys });
		lemma_flatten_singleton(xs);
		lemma_flatten_singleton(ys);
	}
	

	/** ** Implementation */
	
	yields seq<boolean> direction;
	ensures flatten(\result) == xs;
	ensures |\result| == |direction|;
	ensures (\forall int i; 0 <= i && i < |\result| && direction[i]; (\forall int j; 0 <= j && j < |\result[i]| - 1; \result[i][j] < \result[i][j + 1]));
	ensures (\forall int i; 0 <= i && i < |\result| && !direction[i]; (\forall int j; 0 <= j && j < |\result[i]| - 1; \result[i][j] >= \result[i][j + 1]));
	ensures (\forall int i; 0 <= i && i < |\result|; 0 < |\result[i]|);
	ensures (\forall int i; 0 <= i && i < |\result| - 1 && direction[i]; last(\result[i]) >= head(\result[i + 1])); // maximality
	ensures (\forall int i; 0 <= i && i < |\result| - 1 && !direction[i]; last(\result[i]) < head(\result[i + 1])); // maximality
	seq<seq<int>> part1a(seq<int> xs) {
		seq<seq<int>> result = seq<seq<int>> { };
		direction = seq<boolean> { };
		
		int x = 0;
		int y = 1;
		
		fold ListRepr(xs, flatten(result), skip(xs, x));
		fold Maximality(result, direction);
		
		loop_invariant 0 <= x && x < y && y <= |xs| + 1;
		loop_invariant y == x + 1;
		loop_invariant ListRepr(xs, flatten(result), skip(xs, x));
		loop_invariant Maximality(result, direction);
		loop_invariant |result| == |direction|;
		loop_invariant (\forall int i; 0 <= i && i < |result| && direction[i]; (\forall int j; 0 <= j && j < |result[i]| - 1; result[i][j] < result[i][j + 1]));
		loop_invariant (\forall int i; 0 <= i && i < |result| && !direction[i]; (\forall int j; 0 <= j && j < |result[i]| - 1; result[i][j] >= result[i][j + 1]));
		loop_invariant (\forall int i; 0 <= i && i < |result|; 0 < |result[i]|);
		loop_invariant 0 < |result| ==> 0 < |flatten(result)|;
		loop_invariant (x < |xs| && 0 < |result| && last(direction)) ==> last(last(result)) >= xs[x];
		loop_invariant (x < |xs| && 0 < |result| && !last(direction)) ==> last(last(result)) < xs[x];
		while (y < |xs|) {
			boolean incr = xs[x] < xs[y];
			seq<int> current = seq<int> { xs[x] };
			
			assert skip(xs, x) == current + skip(xs, y); // needed
			assert ListRepr(xs, flatten(result), current + skip(xs, y)); // needed
			
			loop_invariant 0 <= x && x < y && y <= |xs|;
			loop_invariant |current| == y - x;
			loop_invariant head(current) == xs[x];
			loop_invariant (\forall int i; 0 <= i && i < |current|; current[i] == xs[x + i]);
			loop_invariant incr ==> (\forall int i; 0 <= i && i < |current| - 1; current[i] < current[i + 1]);
			loop_invariant !incr ==> (\forall int i; 0 <= i && i < |current| - 1; current[i] >= current[i + 1]);
			loop_invariant |result| == |direction|;
			loop_invariant ListRepr(xs, flatten(result), current + skip(xs, y));
			loop_invariant Maximality(result, direction);
			loop_invariant (\forall int i; 0 <= i && i < |result|; 0 < |result[i]|);
			loop_invariant (x < |xs| && 0 < |result| && last(direction)) ==> last(last(result)) >= head(current);
			loop_invariant (x < |xs| && 0 < |result| && !last(direction)) ==> last(last(result)) < head(current);
			while (y < |xs| && (xs[y - 1] < xs[y] == incr)) {
				lemma_skip_unfold_once(xs, y);
				lemma_seq_app_assoc(current, seq<int> { xs[y] }, skip(xs, y + 1));
  
				current = current + seq<int> { xs[y] };
				y = y + 1;
			}
			
			lemma_ListRepr_move_right(xs, flatten(result), current, skip(xs, y));
			lemma_flatten_singleton(current);
			lemma_flatten_app(result, seq<seq<int>> { current });
			
			if (0 < |result|) {
				lemma_Maximality_add(result, direction, current, incr);
			}
			else {
				lemma_Maximality_singleton(current, incr);
			}
  
			result = result + seq<seq<int>> { current };
			direction = direction + seq<boolean> { incr };
			
			x = y;
			y = x + 1;
  
			assert ListRepr(xs, flatten(result), skip(xs, x)); // needed
		}
		
		if (x < |xs|) {
			lemma_ListRepr_move_right(xs, flatten(result), skip(xs, x), seq<int> { });
			lemma_flatten_singleton(skip(xs, x));
			lemma_flatten_app(result, seq<seq<int>> { skip(xs, x) });
			
			if (0 < |result|) {
				lemma_Maximality_add(result, direction, skip(xs, x), true);
			}
			else {
				lemma_Maximality_singleton(skip(xs, x), true);
			}
			
			result = result + seq<seq<int>> { skip(xs, x) };
			direction = direction + seq<boolean> { true };
			
			assert ListRepr(xs, flatten(result), seq<int> { }); // needed
		}
  
		unfold ListRepr(xs, flatten(result), seq<int> { });
		unfold Maximality(result, direction);
		
		return result;
	}
	
	ensures |\result| == |xs|;
	ensures (\forall int i; 0 <= i && i < |xs|; \result[i] == xs[|xs| - 1 - i]);
	ensures \result == rev(xs);
	ensures tobag(\result) == tobag(xs);
	seq<int> reverse(seq<int> xs) {
		seq<int> result = seq<int> { };
		int x = 0;
		
		loop_invariant 0 <= x && x <= |xs|;
		loop_invariant |result| == x;
		loop_invariant (\forall int i; 0 <= i && i < x; result[i] == xs[|result| - 1 - i]);
		while (x < |xs|) {
			result = seq<int> { xs[x] } + result;
			x = x + 1;
		}
		
		assert result == rev(xs);
		lemma_tobag_rev(xs);
		
		return result;
	}
	
	requires incr(xs);
	requires incr(ys);
	ensures |\result| == |xs| + |ys|;
	ensures tobag(\result) == tobag(xs) + tobag(ys);
	ensures (0 < |xs| && 0 == |ys|) ==> (head(\result) == head(xs));
	ensures (0 == |xs| && 0 < |ys|) ==> (head(\result) == head(ys));
	ensures (0 < |xs| && 0 < |ys|) ==> (head(\result) == head(xs) || head(\result) == head(ys));
	ensures incr(\result);
	seq<int> mergelists(seq<int> xs, seq<int> ys) {
		if (0 < |xs| && 0 < |ys|) {
			if (head(xs) < head(ys)) {
				seq<int> rec = mergelists(tail(xs), ys);
				seq<int> res = seq<int> { head(xs) } + rec;

				assert xs == seq<int> { head(xs) } + tail(xs);
				lemma_tobag_cons(head(xs), rec);
				lemma_tobag_cons(head(xs), tail(xs));
				
				return res;
			}
			else {
				seq<int> rec = mergelists(xs, tail(ys));
				seq<int> res = seq<int> { head(ys) } + rec;
				
				assert ys == seq<int> { head(ys) } + tail(ys);
				lemma_tobag_cons(head(ys), rec);
				lemma_tobag_cons(head(ys), tail(ys));
				
				return res;
			}
		}
		else {
			if (0 < |xs|) {
				return xs;
			}
			else {
				return ys;
			}
		}
	}
	
	requires (\forall int i; 0 <= i && i < |xs|; incr(xs[i]));
	ensures incr(\result);
	ensures tobag(\result) == tobag(flatten(xs));
	ensures |\result| == |flatten(xs)|;
	seq<int> mergeall(seq<seq<int>> xs) {
		if (1 < |xs|) {
			seq<int> tmp = mergelists(xs[0], xs[1]);
			seq<int> rec = mergeall(seq<seq<int>> { tmp } + tail(tail(xs)));
			
			lemma_flatten_cons(tmp, tail(tail(xs)));
			lemma_tobag_split(tmp, flatten(tail(tail(xs))));
			lemma_tobag_split(xs[0], xs[1]);
			lemma_tobag_split(xs[0] + xs[1], flatten(tail(tail(xs))));
			lemma_flatten_singleton(xs[0] + xs[1]);
			lemma_flatten_split_two(xs[0], xs[1]);
			lemma_flatten_app(seq<seq<int>> { xs[0], xs[1] }, tail(tail(xs)));
			assert seq<seq<int>> { xs[0], xs[1] } + tail(tail(xs)) == xs; // needed

			return rec;
		}
		else {
			if (|xs| == 1) {
				assert xs == seq<seq<int>> { head(xs) };
				lemma_flatten_singleton(head(xs));
				
				return head(xs);
			}
			else {
				return seq<int> { };
			}
		}
	}
	
	ensures |\result| == |xs|;
	ensures incr(\result); // output is sorted
	ensures tobag(\result) == tobag(xs); // output is permutation of input
	seq<int> part1b(seq<int> xs) {
		seq<boolean> dir = seq<boolean> { };
		seq<seq<int>> segments = part1a(xs) then { dir = direction; };
		seq<seq<int>> newsegments = seq<seq<int>> { };
		int x = 0;
  
		loop_invariant 0 <= x && x <= |segments|;
		loop_invariant |dir| == |segments|;
		loop_invariant flatten(segments) == xs;
		loop_invariant (\forall int i; 0 <= i && i < |segments|; 0 < |segments[i]|);
		loop_invariant (\forall int i; 0 <= i && i < |segments| && dir[i]; incr(segments[i]));
		loop_invariant (\forall int i; 0 <= i && i < |segments| && !dir[i]; decr(segments[i]));
		loop_invariant |newsegments| == x;
		loop_invariant (\forall int i; 0 <= i && i < x; incr(newsegments[i]));
		loop_invariant (\forall int i; 0 <= i && i < x; tobag(newsegments[i]) == tobag(segments[i]));
		while (x < |segments|) {
			if (dir[x]) {
				newsegments = newsegments + seq<seq<int>> { segments[x] };
			}
			else {
				seq<int> tmp = reverse(segments[x]);
				newsegments = newsegments + seq<seq<int>> { tmp };
			}
			
			x = x + 1;
		}
		
		lemma_flatten_tobag(newsegments, segments);
		assert tobag(flatten(newsegments)) == tobag(xs);
		
		return mergeall(newsegments);
	}
}
