// -*- tab-width:2 ; indent-tabs-mode:nil -*-

class silver_optimize {
  int e1,e2,e3;
  int i;
  
  axiom S1 { ( e1 \memberof [ e2 .. e3 )) ==  ( e2 <= e1 && e1 < e3 ) }
  
  seq<int> xs;
  
  axiom head1 { head (xs) == xs[0] }

//  axiom move_implication {
//     (e1 ==> (\forall* int i; e2 ; e3 ))
//     ==
//     (\forall* int i; e1 && e2 ; e3 )
//  }

// to avoid capture: write e1!i to mean that it's an e1 in which i does not occur as a FV
// a -> b -> c = (a & b) -> c
}

